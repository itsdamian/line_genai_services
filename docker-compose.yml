version: '3.8'

services:
  api_gateway:
    build: ./api_gateway
    ports:
      - "8000:8000"
    depends_on:
      user_service:
        condition: service_healthy
      chat_service:
        condition: service_healthy
      image_service:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - USER_SERVICE_URL=http://user_service:8001
      - CHAT_SERVICE_URL=http://chat_service:8002
      - IMAGE_SERVICE_URL=http://image_service:8003
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - LINE_CHANNEL_ACCESS_TOKEN=${LINE_CHANNEL_ACCESS_TOKEN}
      - LINE_CHANNEL_SECRET=${LINE_CHANNEL_SECRET}
    volumes:
      - logs_volume:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s

  user_service:
    build: ./user_service
    ports:
      - "8001:8001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/user_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - logs_volume:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: on-failure

  chat_service:
    build: ./chat_service
    ports:
      - "8002:8002"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/chat_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    volumes:
      - logs_volume:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: on-failure

  image_service:
    build: ./image_service
    ports:
      - "8003:8003"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/image_db
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - GEMINI_API_KEY=${GEMINI_API_KEY}
    volumes:
      - logs_volume:/app/logs
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: on-failure

  postgres:
    image: postgres:14
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-postgres}
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis:
    image: redis:7
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

volumes:
  postgres_data:
  redis_data:
  logs_volume: 